var fs = require('fs'),
    path = require("path"),
    async = require('async'),
    log = require('npmlog'),
    nopt = require('nopt'),
    inspectLib = require('./../lib/inspect'),
    commonTools = require('./../lib/common-tools');
/**********************************************************************/

var cliControl = commonTools.cliControl,
    version = commonTools.version,
    help = commonTools.help,
    setupDevice = commonTools.setupDevice,
    appdata = commonTools.appdata,
    eula = commonTools.eula;

var processName = path.basename(process.argv[1]).replace(/.js/, '');

if (process.argv.length === 2) {
    process.argv.splice(2, 0, '--help');
}
/**********************************************************************/

var knownOpts = {
    "device":   [String, null],
    "app":  [String, null],
    "service":  [String, Array],
    "browser":  Boolean,
    "device-list":  Boolean,
    "open": Boolean,
    "host-port": [String, null],
    "version":  Boolean,
    "help":     Boolean,
    "hidden-help":      Boolean,
    "level":    ['silly', 'verbose', 'info', 'http', 'warn', 'error']
};
var shortHands = {
    "d": ["--device"],
    "a": ["--app"],
    "s": ["--service"],
    "b": ["--browser"],
    "D": ["--device-list"],
    "o": ["--open"],
    "P": ["--host-port"],
    "D": ["--device-list"],
    "V": ["--version"],
    "h": ["--help"],
    "hh": ["--hidden-help"],
    "v": ["--level", "verbose"]
};

var argv = nopt(knownOpts, shortHands, process.argv, 2 /*drop 'node' & 'ares-inspect.js'*/);
/**********************************************************************/

log.heading = processName;
log.level = argv.level || 'warn';
/**********************************************************************/

process.on('uncaughtException', function (err) {
    log.error('uncaughtException', err.stack);
    cliControl.end(-1);
});

log.verbose("argv", argv);

eula.checkEula(function(err) {
    if (err) {
        return finish(err);
    }
    proceed();
});

function proceed () {
    var op;
    if (argv.help || argv['hidden-help']) {
        showUsage(argv['hidden-help']);
        cliControl.end();
    } else if (argv['version']) {
        version.showVersionAndExit();
    } else if (argv['device-list']) {
        setupDevice.showDeviceListAndExit();
    } else {
        op = inspect;
    }
    if (op) {
        version.checkNodeVersion(function(err) {
            async.series([
                op.bind(this)
            ],finish);
        });
    }
}

var options = {
    device: argv.device,
    appId: argv.app || argv.argv.remain[0],
    serviceId: argv.service,
    browser: argv.browser,
    open: argv.open,
    hostPort: argv["host-port"]
};
/**********************************************************************/

function showUsage(hiddenFlag) {
    if (hiddenFlag) {
    	help.display(processName, appdata.getConfig(true).profile, hiddenFlag);
    } else {
      	help.display(processName, appdata.getConfig(true).profile);
    }
}

function inspect(){
    log.info("inspect():", "AppId:", options.appId, "ServiceId:", options.serviceId);
    if(!options.appId && !options.serviceId){
        showUsage();
        cliControl.end(-1);
    }
    async.series([
            inspectLib.inspect.bind(inspectLib, options, null),
            function(next) {
                //TODO: hold process to keep alive
            }
    ], function(err) {
        finish(err);
    });
}

function finish(err, value) {
    if (err) {
        log.error(processName + ": " + err.toString());
        log.verbose(err.stack);
        cliControl.end(-1);
    } else {
        if (value && value.msg) {
            console.log(value.msg);
        }
        cliControl.end();
    }
}

process.on('uncaughtException', function (err) {
    console.log('Caught exception: ' + err);
});
