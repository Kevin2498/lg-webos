var path = require("path"),
    log = require('npmlog'),
    nopt = require('nopt'),
    ssh2 = require('ssh2'),
    commonTools = require('./../lib/common-tools'),
    Pusher = require('./../lib/pusher');

var version = commonTools.version,
    cliControl = commonTools.cliControl,
    help = commonTools.help,
    setupDevice = commonTools.setupDevice,
    appdata = commonTools.appdata,
    eula = commonTools.eula;

var processName = path.basename(process.argv[1]).replace(/.js/, '');

process.on('uncaughtException', function(err) {
    log.error('uncaughtException', err.toString());
    log.info('uncaughtException', err.stack);
    cliControl.end(-1);
});

var knownOpts = {
    "device" : [ String, null ],
    "ignore" : Boolean,
    "device-list" : Boolean,
    "version" : Boolean,
    "help":     Boolean,
    "level":    ['silly', 'verbose', 'info', 'http', 'warn', 'error'],
    "wait-for-device":  Boolean
};

var shortHands = {
    "d" : [ "--device" ],
    "i" : [ "--ignore" ],
    "D" : [ "--device-list" ],
    "V" : [ "--version" ],
    "h": ["--help"],
    "v": ["--level", "verbose"],
    "w": ["--wait-for-device"]
};
var argv = nopt(knownOpts, shortHands, process.argv, 2 /** drop 'node' &  'ares-install.js'*/);

log.heading = processName;
log.level = argv.level || 'warn';
log.verbose("argv", argv);

eula.checkEula(function(err) {
    if (err) {
        return finish(err);
    }
    proceed();
});

function proceed () {
    var op;
    if (argv['device-list']) {
        setupDevice.showDeviceListAndExit();
    } else if (argv['version']) {
        version.showVersionAndExit();
    } else if (argv.help) {
        showUsage();
        cliControl.end();
    } else {
        op = push;
    }

    if (op) {
        version.checkNodeVersion(function(err) {
            op(finish);
        });
    }
}

var options = {
    appId : 'com.ares.defaultName',
    device : argv.device,
    ignore : argv['ignore'],
    waitForDevice: argv['wait-for-device']
};

function showUsage() {

    help.display(processName, appdata.getConfig(true).profile);
}

function push(next) {
    var pusher,
        srcPaths = argv.argv.remain.slice(0, argv.argv.remain.length-1),
        dstPath = argv.argv.remain[argv.argv.remain.length-1];

    if (!srcPaths || !dstPath) {
        showUsage();
        cliControl.end(-1);
    }
    pusher = new Pusher();
    pusher.push(srcPaths, dstPath, options,finish);
}

function finish(err, value) {
    log.info("finish():", "err:", err);
    if (err) {
        log.error(processName + ": " + err.toString());
        cliControl.end(-1);
    } else {
        log.info('finish():', value);
        if (value && value.msg) {
            console.log(value.msg);
        }
        cliControl.end();
    }
}
