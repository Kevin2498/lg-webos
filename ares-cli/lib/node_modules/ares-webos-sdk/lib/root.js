var async = require('async'),    
    path = require('path'),
    npmlog = require('npmlog'),
    fs = require('fs'),
    childprocess = require('child_process'),
    commonTools = require('./common-tools'),
    novacom = require('./novacom'),
    novacomusb = require('./novacom-usb');

(function() {

    var log = npmlog;

    log.heading = 'logger';
    log.level = 'warn';


    var root = {

        /**
         * @property {Object} log an npm log instance
         */
        log: log,


        /**
         * @property {Object} novacom_path an novacom command path
         */
        novacom_path: null,

        /**
         * @property {Object} deviceId an webos device Id value
         */
        deviceId: null,

        enableRoot: function(options, finish) {
            console.log("Enable Root ....");

            root.options = options;
            root.novacom_path = novacomusb.getNovacomPath();

            var session;
            async.waterfall([
                this._getdeviceInfo,
                _setupRootHost,
                _setRootPref,
                this._checkPrefFile,
                this._removeOldPref,
                this._putPref,
                _killNovacomd,
                this._reboot
            ], finish);

            function _setupRootHost(next) {
                var homeDir = process.env.HOME || process.env.USERPROFILE;
                var appDir = commonTools.appdata.getPath();

                if (!homeDir && process.env.HOMEPATH && process.env.HOMEDRIVE) {
                    homeDir = path.join(process.env.HOMEDRIVE, process.env.HOMEPATH);
                }

                var settingFilesDir = path.join(__dirname, 'setting-files');
                var sshHostRootFile = path.join(homeDir, '.ssh', 'webos_w2-linux-root');
                var sshHostRootPrivFile = path.join(homeDir, '.ssh', 'webos_w2-linux-root.ppk');
                var usbAuthFile = path.join(appDir, 'novacom-usb-auth.json');
                root._copyFile(path.join(settingFilesDir, 'keys', 'webos_w2-linux-root'), sshHostRootFile, function(err) {
                    if (err) return setImmediate(next, err);

                    if (process.platform.indexOf("win") > -1) {
                        root._copyFile(path.join(settingFilesDir, 'keys', 'webos_w2-linux-root.ppk'), sshHostRootPrivFile, function(err) {
                            if (err) return setImmediate(next, err);
                            _copyAuthRootFile(next);
                        });
                    } else {
                        _copyAuthRootFile(next);
                    }
                });

                function _copyAuthRootFile(next) {
                    root._copyFile(path.join(settingFilesDir, 'novacom-usb-auth-root.json'), usbAuthFile, function(err) {
                        if (err) return setImmediate(next, err);
                        fs.chmod(sshHostRootFile, 0600, next);
                    });
                }
            }

            function _setRootPref(next) {
                next(null, 'checksum_root');
            }

            function _killNovacomd(next) {
                var spawn = childprocess.spawn, cmd;
                var novacomPath = novacomusb.getNovacomPath();
                if (root.deviceId)
                    cmd = spawn(root.novacom_path, ["run", "file:///usr/bin/killall novacomd","-d",root.deviceId]);
                else
                    cmd = spawn(root.novacom_path, ["run", "file:///usr/bin/killall novacomd"]);

                cmd.on('error', function (code) {
                    log.silly("_killNovacomd error :: ", code);
                });

                cmd.stdin.end();

                cmd.on('close', function (code) {
                    setTimeout(next, 4000);
                });
            }
        },


        disableRoot: function(options, finish) {
            console.log("Disable Root ....");

            root.options = options;
            root.novacom_path = novacomusb.getNovacomPath();

            var session;
            async.waterfall([
                this._getdeviceInfo,
                _setupDevHost,
                _setDevPref,
                this._checkPrefFile,
                this._removeOldPref,
                this._putPref,
                this._reboot
            ], finish);

            function _setDevPref(next) {
                next(null, 'checksum_dev');
            }

            function _setupDevHost(next) {
                var homeDir = process.env.HOME || process.env.USERPROFILE;
                var appDir = process.env.APPDATA || process.env.HOME || process.env.USERPROFILE;

                if (!homeDir && process.env.HOMEPATH && process.env.HOMEDRIVE) {
                    homeDir = path.join(process.env.HOMEDRIVE, process.env.HOMEPATH);
                }

                function _copyAuthRootFile (next) {
                    root._copyFile(path.join(settingFilesDir, 'novacom-usb-auth-root.json'), usbAuthFile, function(err) {
                        if (err) return setImmediate(next, err);
                        fs.chmod(sshHostRootFile, 0600, next);
                    });
                }

                var settingFilesDir = path.join(__dirname, 'setting-files');
                var sshHostDevFile = path.join(homeDir, '.ssh', 'webos_w2-linux-dev');
                var sshHostDevPrivFile = path.join(homeDir, '.ssh', 'webos_w2-linux-dev.ppk');
                var usbAuthFile = path.join(appDir, 'novacom-usb-auth.json');
                root._copyFile(path.join(settingFilesDir, 'keys', 'webos_w2-linux-dev'), sshHostDevFile, function(err) {
                    if (err) return setImmediate(next, err);
                    if (process.platform.indexOf("win") > -1) {
                        root._copyFile(path.join(settingFilesDir, 'keys', 'webos_w2-linux-dev.ppk'), sshHostDevPrivFile, function(err) {
                            if (err) return setImmediate(next, err);
                            _copyAuthDevFile(next);
                        });
                    } else {
                        _copyAuthDevFile(next);
                    }
                });

                function _copyAuthDevFile (next) {
                    root._copyFile(path.join(settingFilesDir, 'novacom-usb-auth-dev.json'), usbAuthFile, function(err) {
                        if (err) return setImmediate(next, err);
                        fs.chmod(sshHostDevFile, 0600, next);
                    });
                }
            }
        },

        _checkPrefFile: function(developerKey, next) {
            fs.exists(path.join(__dirname, 'setting-files', developerKey), function(exists) {
                if (exists) {
                    next(null, developerKey);
                } else {
                    setImmediate(next, 'checksum file is not found');
                }
            });
        },

        _removeOldPref: function(developerKey, next) {
            var spawn = childprocess.spawn, rm;
            if (root.deviceId)
                rm = spawn(root.novacom_path, ["run", "file:///bin/rm /var/luna/preferences/developer_key","-d",root.deviceId]);
            else
                rm = spawn(root.novacom_path, ["run", "file:///bin/rm /var/luna/preferences/developer_key"]);

            rm.stderr.on('data', function (data) {
                log.silly("_removeOldPref error :: ", data);
            });

            rm.stdin.end();

            rm.on('close', function (code) {
                next(null, developerKey);
            });
        },

        _putPref: function(developerKey, next) {
            var spawn = childprocess.spawn,ls;
            if (root.deviceId)
                ls    = spawn(root.novacom_path, ["put", "file:///var/luna/preferences/developer_key","-d",root.deviceId]);
            else
                ls    = spawn(root.novacom_path, ["put", "file:///var/luna/preferences/developer_key"]);

            fs.readFile(path.join(__dirname, 'setting-files', developerKey), function(err, data) {
                ls.stdin.write(data);
                ls.stdin.end();
            });

            ls.stderr.on('data', function (data) {
                setImmediate(next, data);
            });

            ls.on('close', function (code) {
                next(null);
            });
        },

        _reboot: function(next) {
            console.log("Device will reboot");
            var spawn = childprocess.spawn, cmd;
            if (root.deviceId)
                cmd    = spawn(root.novacom_path, ["run", "file:///sbin/reboot -f", "-d", root.deviceId]);
            else
                cmd    = spawn(root.novacom_path, ["run", "file:///sbin/reboot -f"]);

            cmd.stdin.end();

            cmd.on('error', function (code) {
                log.silly("_reboot error :: ", code);
            });

            cmd.on('close', function (code) {
                next(null);
            });
        },

        _copyFile: function(source, target, next) {
            var nextCalled = false;
            var rd = fs.createReadStream(source);
            rd.on("error", function(err) {
                done(err);
            });
            var wr = fs.createWriteStream(target);
            wr.on("error", function(err) {
                done(err);
            });
            wr.on("close", function(ex) {
                done();
            });
            rd.pipe(wr);

            function done(err) {
                if (!nextCalled) {
                    next(err);
                    nextCalled = true;
                }
            }
        },

        _getdeviceInfo: function(next) {
            var resolver = new novacom.Resolver();
            async.series([
                resolver.load.bind(resolver),
                function(next){
                    for(var dev in resolver.devices){
                        if(resolver.devices[dev].name != root.options.device){
                            continue;
                        } 
                        root.deviceId = resolver.devices[dev].id;
                        break;
                    }           
                    next();
                }
            ], function() {
                next();
            });
        }
    };

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = root;
    }
}());
